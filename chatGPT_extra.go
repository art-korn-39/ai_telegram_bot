package main

import (
	"context"
	"fmt"
	"slices"
	"strings"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
	"github.com/sashabaranov/go-openai"
)

func gpt_WelcomeTextMessage(u *UserInfo) string {

	duration := GetDurationToNextDay()
	hours := int(duration.Hours())
	minutes := int(duration.Minutes()) - hours*60

	return fmt.Sprintf(`–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ChatGPT 3.5 Turbo ü§ñ

–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: <b>%d</b> <i>(–æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑: %d —á. %d –º–∏–Ω.)</i>`,
		max(Cfg.DailyLimitTokens-u.Tokens_used_gpt, 0),
		hours,
		minutes)

	// return fmt.Sprintf(`–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ChatGPT 3.5 Turbo ü§ñ

	// *–ö–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è <b>%d</b> —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
	// - 1 —Ç–æ–∫–µ–Ω —Ä–∞–≤–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–ª–∏ 2 —Å–∏–º–≤–æ–ª–∞–º —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
	// - –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 1000 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤.

	// –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: <b>%d</b>`, Cfg.DailyLimitTokens, max(Cfg.DailyLimitTokens-u.Tokens_used_gpt, 0))

}

func gpt_DialogSendMessage(user *UserInfo, text string, firstLaunch bool) {

	messages := append(user.Messages_ChatGPT, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleUser,
		Content: text,
	})

	resp, err := clientOpenAI.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model:    openai.GPT3Dot5Turbo,
			Messages: messages,
		},
	)

	var content string
	if err != nil {
		errString := err.Error()

		// –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤, –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
		if strings.Contains(errString, "This model's maximum context length is 4097 tokens") && firstLaunch { //—á—Ç–æ–±—ã –≤ —Ä–µ–∫—É—Ä—Å–∏—é –Ω–µ —É–π—Ç–∏

			SendMessage(user, "–î–æ—Å—Ç–∏–Ω–≥—É—Ç –ª–∏–º–∏—Ç –≤ 4097 —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω.", nil, "")

			Logs <- NewLog(user, "chatgpt", Warning, "request: "+text+"\nwarning: "+errString)

			user.Messages_ChatGPT = []openai.ChatCompletionMessage{}
			gpt_DialogSendMessage(user, text, false)
			return

		} else {
			Logs <- NewLog(user, "chatgpt", Error, "request: "+text+"\nerror: "+errString)
			SendMessage(user, "–í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", nil, "")
			return
		}
	}

	user.Tokens_used_gpt = user.Tokens_used_gpt + resp.Usage.TotalTokens

	content = resp.Choices[0].Message.Content

	messages = append(messages, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleAssistant,
		Content: content},
	)

	user.Messages_ChatGPT = messages

	SendMessage(user, content, nil, "")

}

func gpt_SendSpeechSamples(user *UserInfo) {

	for _, voice := range voices {
		filename := WorkDir + "/samples/gpt_voice_" + voice + ".mp3"
		Message := tgbotapi.NewAudioUpload(user.ChatID, filename)
		Message.Caption = voice
		Bot.Send(Message)
	}

}

func gpt_DailyLimitOfTokensIsOver(u *UserInfo) bool {

	if u.Tokens_used_gpt >= Cfg.DailyLimitTokens {
		duration := GetDurationToNextDay()
		hours := int(duration.Hours())
		minutes := int(duration.Minutes()) - hours*60
		msgText := fmt.Sprintf("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (%d —á. %d –º–∏–Ω.) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.", hours, minutes)
		SendMessage(u, msgText, buttons_gptTypes, "")
		return true
	}

	return false

}

func gpt_GetSpeechVoice(voice string) (v openai.SpeechVoice, isError bool) {

	array := []openai.SpeechVoice{openai.VoiceAlloy, openai.VoiceEcho, openai.VoiceFable,
		openai.VoiceOnyx, openai.VoiceNova, openai.VoiceShimmer}

	SV := openai.SpeechVoice(strings.ToLower(voice))

	i := slices.Index(array, SV)
	if i == -1 {
		return "", true
	} else {
		return array[i], false
	}

}
