package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"slices"
	"strings"
	"time"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
)

var WorkDir string //C:/DEV/GO/ai_telegram_bot

var (
	delay_upd            = time.Tick(time.Millisecond * 10)
	delay_ChatGPT        = time.Tick(time.Second * 15 / 10) // 40 RPM
	delay_Gemini         = time.Tick(time.Second * 12 / 11) // 55 RPM
	delay_Kandinsky      = time.Tick(time.Second * 3)       // 20 RPM
	delay_SaveUserStates = time.Tick(time.Minute * 1)       // 1 RPM
)

func init() {
	_, callerFile, _, _ := runtime.Caller(0)
	WorkDir = strings.ReplaceAll(filepath.Dir(callerFile), "\\", "/")
}

func MsgIsCommand(m *tgbotapi.Message) bool {

	if slices.Contains(Models, strings.ToLower(m.Text)) {
		return true
	}

	return m.IsCommand()

}

func MsgCommand(m *tgbotapi.Message) string {

	if slices.Contains(Models, strings.ToLower(m.Text)) {
		return strings.ToLower(m.Text)
	}

	return m.Command()

}

func start(user string) string {

	return fmt.Sprintf(`
–ü—Ä–∏–≤–µ—Ç, %s! üëã

–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ (v%s).
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏:

<b>ChatGPT</b> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.
<b>Gemini</b> - –∞–Ω–∞–ª–æ–≥ ChatGPT –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Google.
<b>Kandinsky</b> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.

<u>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</u>
<i>06.01.23 - üèû –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ AI Gemini.</i>
<i>09.01.23 - üéß –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ ChatGPT.</i>

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ –∑–∞–¥–∞–π –µ–π –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ —Å–¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É), —É–¥–∞—á–∏ üî•`,
		user, Version)

}

func MapToJSON(m map[string]string) string {

	result, _ := json.Marshal(m)
	return string(result)

}

func JSONtoMap(JSON string) map[string]string {

	result := map[string]string{}

	resBytes := []byte(JSON)
	//resBytes := io.ReadAll(res.Body)
	json.Unmarshal(resBytes, &result)

	return result

}

func GetDurationToNextDay() time.Duration {

	// —Ç–µ–∫. –≤—Ä–µ–º—è –ø–æ –ú—Å–∫
	now := MskTimeNow()

	// –¥–æ–±–∞–≤–∏–ª–∏ —Å—É—Ç–∫–∏
	tomorrow := now.Add(time.Hour * 24)

	// –æ–∫—Ä—É–≥–ª–∏–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
	startDay := tomorrow.Truncate(time.Hour * 24)

	// —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
	// —Ç.–∫. –±–µ—Ä–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC, —Ç–æ –≤—ã—á–∏—Ç–∞–µ–º 3 —á–∞—Å–∞
	duration := time.Until(startDay) - (time.Hour * 3)

	return duration

}

func CreateFile(filename string, data io.Reader) error {

	outFile, _ := os.Create(filename)
	defer outFile.Close()
	_, err := io.Copy(outFile, data) //res = io.ReadClose
	if err != nil {
		return err
	}

	return nil

}
