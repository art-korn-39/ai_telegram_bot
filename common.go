package main

import (
	"fmt"
	"time"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
)

func start(user *UserInfo, message *tgbotapi.Message) {

	name := message.From.FirstName
	if name == "" {
		name = user.Username
	}

	msgtxt := fmt.Sprintf(GetText(MsgText_Start, user.Language), name)
	SendMessage(user, msgtxt, GetButton(btn_Models, ""), "HTML")

	user.Path = ""

}

func account(user *UserInfo) {

	// –ø—Ä–∏–º–µ—Ä +++
	sample :=
		`
üë§ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>%d</b>
‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: <b>%s</b>
‚úåÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ (–¥–Ω–µ–π): <b>%d</b>
‚úÖ –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <b>%s</b>
----------------------------------------------
–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:
üÉè Gemini 1.5 –∑–∞–ø—Ä–æ—Å—ã: <b>%d</b> (–æ—Å—Ç–∞–ª–æ—Å—å <b>%d</b>)
üöÄ Gemini –∑–∞–ø—Ä–æ—Å—ã: <b>%d</b> (–æ—Å—Ç–∞–ª–æ—Å—å <b>%d</b>)
ü§ñ ChatGPT —Ç–æ–∫–µ–Ω—ã: <b>%d</b> (–æ—Å—Ç–∞–ª–æ—Å—å <b>%d</b>)
üóø Kandinsky: <b>–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</b>
üèî Stable Diffusion: <b>%d</b> (–æ—Å—Ç–∞–ª–æ—Å—å <b>%d</b>)
üé≠ Face Swap: <b>%d</b> (–æ—Å—Ç–∞–ª–æ—Å—å <b>%d</b>)
----------------------------------------------                
		
<i>–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ : %d —á. %d –º–∏–Ω.</i>
			
–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ (%d –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏ –±–æ–ª–µ–µ) –ø–æ–ª—É—á–∞—é—Ç <b>%s</b> —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ 
–ø–æ <b>%d</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ Stable Diffusion –∏ Face Swap + <b>%d</b> –∑–∞–ø—Ä–æ—Å–æ–≤ Gemini 1.5 –≤ —Å—É—Ç–∫–∏ üî•`

	// –ø—Ä–∏–º–µ—Ä ---

	sample = GetText(MsgText_Account, user.Language)

	duration := GetDurationToNextDay()
	hours := int(duration.Hours())
	minutes := int(duration.Minutes()) - hours*60
	mapWithStreak, _ := SQL_UserDayStreak(user)
	DayStreak := mapWithStreak[user.ChatID]
	FirstDate, _ := SQL_GetFirstDate(user)

	msgText := fmt.Sprintf(sample,
		user.ChatID,                                  // ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		GetLevelName(user.Level, user.Language),      // –£—Ä–æ–≤–µ–Ω—å
		DayStreak,                                    // –ü–æ—Å–µ—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ (–¥–Ω–µ–π)
		FirstDate.Format(time.DateOnly),              // –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		Get_RPD_gen15(user),                          // Gemini 1.5 –Ω–∞ –¥–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		max(Get_RPD_gen15(user)-user.Usage.Gen15, 0), // Gemini 1.5 –æ—Å—Ç–∞—Ç–æ–∫
		Cfg.RPD_gen10,                                // Gemini 1.0 –Ω–∞ –¥–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		max(Cfg.RPD_gen10-user.Usage.Gen10, 0),       // Gemini 1.0 –æ—Å—Ç–∞—Ç–æ–∫
		Get_TPD_gpt(user),                            // ChatGPT –Ω–∞ –¥–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		max(Get_TPD_gpt(user)-user.Usage.GPT, 0),     // ChatGPT –æ—Å—Ç–∞—Ç–æ–∫
		Get_RPD_sdxl(user),                           // Stable Diffusion –Ω–∞ –¥–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		max(Get_RPD_sdxl(user)-user.Usage.SDXL, 0),   // Stable Diffusion –æ—Å—Ç–∞—Ç–æ–∫
		Get_RPD_fs(user),                             // Face Swap –Ω–∞ –¥–µ–Ω—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		max(Get_RPD_fs(user)-user.Usage.FS, 0),       // Face Swap –æ—Å—Ç–∞—Ç–æ–∫
		hours, minutes,                               // time to refresh
		Cfg.DaysForAdvancedStatus,             // –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
		GetLevelName(Advanced, user.Language), // –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–æ–∫–æ–π
		Cfg.RPD_advanced_sdxl,                 // Stable Diffusion –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
		//Cfg.TPD_advanced_gpt,                  // ChatGPT –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
		Cfg.RPD_advanced_gen15, // Gen 1.5 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
	)

	SendMessage(user, msgText, GetButton(btn_Models, ""), "HTML")

	user.Path = ""

}

func language_start(user *UserInfo) {

	msgText := "Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
	SendMessage(user, msgText, GetButton(btn_Languages, ""), "")

	user.Path = "language/type"

}

// –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
func language_type(user *UserInfo, text string) {

	switch text {
	case "English":
		user.Language = "en"
	case "–†—É—Å—Å–∫–∏–π":
		user.Language = "ru"
	default:
		msgText := GetText(MsgText_SelectOption, user.Language)
		SendMessage(user, msgText, nil, "")
		return
	}

	msgText := GetText(MsgText_LanguageChanged, user.Language)
	SendMessage(user, msgText, GetButton(btn_Models, user.Language), "")

	user.Path = "start"

}
