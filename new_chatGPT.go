package main

import (
	"context"
	"fmt"
	"io"
	"os"
	"strings"
	"unicode/utf8"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
	"github.com/sashabaranov/go-openai"
)

// OpenAIToken = "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" //–ö–æ–ª–∏
// OpenAIToken = "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" //–ú–æ–π

//–¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
//2 —Å–∏–º–≤–æ–ª–∞ RU = 1 —Ç–æ–∫–µ–Ω
//4 —Å–∏–º–≤–æ–ª–∞ EN = 1 —Ç–æ–∫–µ–Ω
//utf8.RuneCountInString(str)

var (
	clientOpenAI     *openai.Client
	voices           = []string{"fable", "nova", "echo", "onyx"}
	buttons_gptTypes = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
			tgbotapi.NewKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"),
		),
	)
	buttons_gptVoices = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("onyx"),
			tgbotapi.NewKeyboardButton("nova"),
			tgbotapi.NewKeyboardButton("echo"),
			tgbotapi.NewKeyboardButton("fable"),
		),
	)
	buttons_gptClearContext = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
			tgbotapi.NewKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
		),
	)
	buttons_gptAudioNewgen = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"),
			tgbotapi.NewKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å"),
			tgbotapi.NewKeyboardButton("–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
		),
	)
	buttons_sampleAudio = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Audio samples", "gpt_audio_samples"),
		),
	)
)

// –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/chatgpt" –∏–ª–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ = "chatgpt"
func gpt_start(user *UserInfo) {

	msgText := fmt.Sprintf(`–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ChatGPT 3.5 Turbo ü§ñ

*–ö–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è <b>%d</b> —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
- 1 —Ç–æ–∫–µ–Ω —Ä–∞–≤–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–ª–∏ 2 —Å–∏–º–≤–æ–ª–∞–º —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
- –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 1000 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤.

–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: <b>%d</b>`, Cfg.DailyLimitTokens, max(Cfg.DailyLimitTokens-user.TokensUsed_ChatGPT, 0))

	SendMessage(user, msgText, button_RemoveKeyboard, "HTML")

	msgText = `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`
	SendMessage(user, msgText, buttons_gptTypes, "")

	user.Path = "chatgpt/type"

}

// –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
func gpt_type(user *UserInfo, text string) {

	if DailyLimitOfTokensIsOver(user) {
		return
	}

	switch text {
	case "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥":
		msgText := `–ó–∞–ø—É—â–µ–Ω –¥–∏–∞–ª–æ–≥ —Å –°hatGPT, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç". –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤.`
		SendMessage(user, msgText, button_RemoveKeyboard, "")
		SendMessage(user, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", buttons_gptClearContext, "")
		user.Path = "chatgpt/type/dialog"
	case "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞":
		SendMessage(user, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞—É–¥–∏–æ:", button_RemoveKeyboard, "")
		user.Path = "chatgpt/type/audio_text"
	default:
		gpt_dialog(user, text, true)
		user.Path = "chatgpt/type/dialog"
	}

}

// –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func gpt_dialog(user *UserInfo, text string, firstLaunch bool) {

	if DailyLimitOfTokensIsOver(user) {
		return
	}

	if text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç" {
		user.Messages_ChatGPT = []openai.ChatCompletionMessage{}
		SendMessage(user, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω.", nil, "")
		SendMessage(user, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", nil, "")
		return
	}

	if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥" {
		user.Messages_ChatGPT = []openai.ChatCompletionMessage{}
		SendMessage(user, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", buttons_gptTypes, "")
		user.Path = "chatgpt/type"
		return
	}

	<-delay_ChatGPT

	Operation := SQL_NewOperation(user, "chatgpt", "dialog", text)
	SQL_AddOperation(Operation)

	messages := append(user.Messages_ChatGPT, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleUser,
		Content: text,
	})

	resp, err := clientOpenAI.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model:    openai.GPT3Dot5Turbo,
			Messages: messages,
		},
	)

	var content string
	if err != nil {
		errString := err.Error()

		// –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤, –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
		if strings.Contains(errString, "This model's maximum context length is 4097 tokens") && firstLaunch { //—á—Ç–æ–±—ã –≤ —Ä–µ–∫—É—Ä—Å–∏—é –Ω–µ —É–π—Ç–∏

			SendMessage(user, "–î–æ—Å—Ç–∏–Ω–≥—É—Ç –ª–∏–º–∏—Ç –≤ 4097 —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω.", nil, "")

			Logs <- NewLog(user, "chatgpt", Warning, "request: "+text+"\nwarning: "+errString)

			user.Messages_ChatGPT = []openai.ChatCompletionMessage{}
			gpt_dialog(user, text, false)
			return

		} else {
			Logs <- NewLog(user, "chatgpt", Error, "request: "+text+"\nerror: "+errString)
			SendMessage(user, "–í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", nil, "")
			return
		}
	}

	user.TokensUsed_ChatGPT = user.TokensUsed_ChatGPT + resp.Usage.TotalTokens

	content = resp.Choices[0].Message.Content

	messages = append(messages, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleAssistant,
		Content: content},
	)

	user.Messages_ChatGPT = messages

	//SendMessage(user, content, buttons_gptClearContext, "")
	SendMessage(user, content, nil, "")

}

// –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func gpt_audio_text(user *UserInfo, text string) {

	if DailyLimitOfTokensIsOver(user) {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	if text == "" {
		msgText := "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è."
		SendMessage(user, msgText, button_RemoveKeyboard, "")
		return
	}

	length := utf8.RuneCountInString(text)
	if length*20 > (Cfg.DailyLimitTokens - user.TokensUsed_ChatGPT) {
		msgText := "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –º–µ–Ω—å—à–µ–π –¥–ª–∏–Ω—ã."
		SendMessage(user, msgText, button_RemoveKeyboard, "")
		return
	}

	user.Options["text"] = text

	msgText := `–ü—Ä–∏–º–µ—Ä—ã –∑–≤—É—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤`
	SendMessage(user, msgText, buttons_sampleAudio, "")

	msgText = `–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:`
	SendMessage(user, msgText, buttons_gptVoices, "")

	user.Path = "chatgpt/type/audio_text/voice"

}

// –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
func gpt_speech(user *UserInfo, text string) {

	if DailyLimitOfTokensIsOver(user) {
		return
	}

	if text == "gpt_audio_samples" {
		gpt_SendAudioSamples(user)
		return
	}

	voice, isErr := gptGetVoice(text)
	if isErr {
		msgText := "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
		SendMessage(user, msgText, buttons_gptVoices, "")
		return
	}

	model := openai.TTSModel1HD
	inputText := user.Options["text"]

	Operation := SQL_NewOperation(user, "chatgpt", "speech", text)
	SQL_AddOperation(Operation)

	SendMessage(user, "–ó–∞–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ...", nil, "")

	res, err := clientOpenAI.CreateSpeech(context.Background(),
		openai.CreateSpeechRequest{
			Model: model,
			Input: inputText,
			Voice: voice,
		})

	if err != nil {
		Logs <- NewLog(user, "chatgpt{audio}", 1, err.Error())
		msgText := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		SendMessage(user, msgText, buttons_gptTypes, "")
		user.Path = "chatgpt/type"
		return
	}

	user.TokensUsed_ChatGPT = user.TokensUsed_ChatGPT + utf8.RuneCountInString(inputText)*20

	filename := fmt.Sprintf(WorkDir+"/data/audio_%d.mp3", user.ChatID)
	outFile, _ := os.Create(filename)
	defer outFile.Close()
	_, err = io.Copy(outFile, res)
	if err != nil {
		Logs <- NewLog(user, "chatgpt{audio}", 1, err.Error())
		msgText := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		SendMessage(user, msgText, buttons_gptTypes, "")
		user.Path = "chatgpt/type"
		return
	}

	Message := tgbotapi.NewAudioUpload(user.ChatID, filename)
	Message.Caption = fmt.Sprintf(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É "%s", –≥–æ–ª–æ—Å: "%s"`, inputText, voice)
	Message.ReplyMarkup = buttons_gptAudioNewgen
	Bot.Send(Message)

	Logs <- NewLog(user, "chatgpt", Info, filename)

	user.Path = "chatgpt/type/audio_text/voice/newgen"

}

// –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
func gpt_audio_newgen(user *UserInfo, text string) {

	if DailyLimitOfTokensIsOver(user) {
		return
	}

	switch text {
	case "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç":
		SendMessage(user, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:", button_RemoveKeyboard, "")
		user.Path = "chatgpt/type/audio_text"
	case "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å":
		SendMessage(user, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", buttons_gptVoices, "")
		user.Path = "chatgpt/type/audio_text/voice"
	case "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥":
		user.ClearUserData()
		SendMessage(user, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", buttons_gptClearContext, "")
		user.Path = "chatgpt/type/dialog"
	default:
		SendMessage(user, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", buttons_gptAudioNewgen, "")
	}

}

func gpt_SendAudioSamples(user *UserInfo) {

	for _, voice := range voices {
		filename := WorkDir + "/samples/gpt_voice_" + voice + ".mp3"
		Message := tgbotapi.NewAudioUpload(user.ChatID, filename)
		Message.Caption = voice
		Bot.Send(Message)
	}

}

func DailyLimitOfTokensIsOver(u *UserInfo) bool {

	if u.TokensUsed_ChatGPT >= Cfg.DailyLimitTokens {
		duration := GetDurationToNextDay()
		hours := int(duration.Hours())
		minutes := int(duration.Minutes()) - hours*60
		msgText := fmt.Sprintf("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (%d —á %d –º–∏–Ω) –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.", hours, minutes)
		SendMessage(u, msgText, buttons_gptTypes, "")
		return true
	}

	return false

}
