package main

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

//https://ai.google.dev/tutorials/go_quickstart?hl=ru
//https://ai.google.dev/models/gemini?hl=ru

// Gemini_APIKEY = "AIzaSyC0myz4bPIDyx6pPtW0PBZqmJW37A5VJ_k"

// - FinishReasonSafety –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
// - BlockReasonSafety –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–º—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
// `safety_ratings`, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –µ–≥–æ.

var (
	ctx_Gemini    context.Context
	client_Gemini *genai.Client
	model_Gemini  *genai.GenerativeModel
)

func NewConnectionGemini() {
	ctx_Gemini = context.Background()
	client_Gemini, _ = genai.NewClient(ctx_Gemini, option.WithAPIKey(Cfg.GeminiKey))
	model_Gemini = client_Gemini.GenerativeModel("gemini-pro")
}

// –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/gemini" –∏–ª–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ = "gemini"
func gen_start(user *UserInfo) {

	msgText := `–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Gemini Pro –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Google üöÄ`
	//–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º.`
	//–í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç –º–æ–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (ChatGPT) - —É –º–µ–Ω—è –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å—Å—è —Å–∫–æ–ª—å–∫–æ –ø–æ–∂–µ–ª–∞–µ—à—å üòé`

	SendMessage(user, msgText, nil, "")

	msgText = `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`
	SendMessage(user, msgText, buttons_genTypes, "")

	user.Path = "gemini/type"

}

// –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
func gen_type(user *UserInfo, text string) {

	if gen_DailyLimitOfRequestsIsOver(user) {
		return
	}

	switch text {
	case "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥":
		SendMessage(user, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", buttons_genEndDialog, "")
		user.Path = "gemini/type/dialog"
	case "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º":
		SendMessage(user, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫", button_RemoveKeyboard, "")
		user.Path = "gemini/type/image"
	default:
		gen_dialog(user, text)
		user.Path = "gemini/type/dialog"
	}

}

// –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func gen_dialog(user *UserInfo, text string) {

	if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥" {
		user.Messages_Gemini = []*genai.Content{}
		SendMessage(user, `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`, buttons_genTypes, "")
		user.Path = "gemini/type"
		return
	}

	if gen_DailyLimitOfRequestsIsOver(user) {
		return
	}

	<-delay_Gemini

	user.Requests_today_gen++

	Operation := SQL_NewOperation(user, "gemini", "dialog", text)
	SQL_AddOperation(Operation)

	var msgText string
	cs := model_Gemini.StartChat()
	cs.History = user.Messages_Gemini

	resp, err := cs.SendMessage(ctx_Gemini, genai.Text(text))
	if err != nil {
		errorString := err.Error()
		Logs <- NewLog(user, "gemini", Error, errorString)

		if errorString == "blocked: candidate: FinishReasonSafety" {

			// –í —Å–ª—É—á–∞–µ –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –æ—à–∏–±–∫–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			NewConnectionGemini()
			msgText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥."

		} else if errorString == "blocked: prompt: BlockReasonSafety" {

			msgText = "–ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞."

		} else if errorString == "googleapi: Error 500:" {

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
			time.Sleep(time.Millisecond * 200)
			Logs <- NewLog(user, "gemini", Error, "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ...")
			resp, err = cs.SendMessage(ctx_Gemini, genai.Text(text))
			if err != nil {
				msgText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			}

		} else {
			msgText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –æ—Ç–≤–µ—Ç
		if err != nil {
			SendMessage(user, msgText, nil, "")
			return
		}
	}

	if resp.Candidates[0].Content == nil {
		Logs <- NewLog(user, "gemini", Error, "resp.Candidates[0].Content = nil")
		msgText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞."
		SendMessage(user, msgText, nil, "")
		return
	}

	result := resp.Candidates[0].Content.Parts[0].(genai.Text)

	history := append(user.Messages_Gemini,
		&genai.Content{
			Parts: []genai.Part{
				genai.Text(text),
			},
			Role: "user",
		},
		&genai.Content{
			Parts: []genai.Part{
				genai.Text(result),
			},
			Role: "model",
		},
	)

	user.Messages_Gemini = history

	msgText = string(result)
	SendMessage(user, msgText, nil, "")

}

// –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func gen_image(user *UserInfo, message *tgbotapi.Message) {

	if gen_DailyLimitOfRequestsIsOver(user) {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	if message.Photo == nil {
		msgText := "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫."
		SendMessage(user, msgText, button_RemoveKeyboard, "")
		return
	}

	// –ü–æ—Ç–æ–º –ª—É—á—à–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å, –∞ —Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –±–∞–≥–∏
	if len(user.Images_Gemini) >= 10 {
		return
	}

	photos := *message.Photo

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
	user.WG.Add(1)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
	// data/img_ChatID_MsgID.jpg
	name := fmt.Sprintf("img_%d_gen_%d", user.ChatID, message.MessageID)
	filename, err := DownloadFile(photos[len(photos)-1].FileID, name)
	if err != nil {
		Logs <- NewLog(user, "gemini", Error, err.Error())
		msgText := "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
		SendMessage(user, msgText, button_RemoveKeyboard, "")
		user.WG.Done()
		return
	}

	// –°–æ–±–∏—Ä–∞–µ–º –≤ map, –≥–¥–µ key = MsgID, value = –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	// –¢—É—Ç –≤–∞–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –≥–æ—Ä—É—Ç–∏–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã —Å–∞–º–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
	user.Mutex.Lock()
	if user.Images_Gemini == nil {
		// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–ø—É —Å —Ñ–∞–π–ª–∞–º–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (—Ö–æ—Ç—è –æ–±—ã—á–Ω–æ –æ–Ω–∞ != nil)
		user.Images_Gemini = map[int]string{}
	}
	ImageNumber := len(user.Images_Gemini)                            // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
	newName := fmt.Sprintf("img_%d_gen_%d", user.ChatID, ImageNumber) // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤ –º–∞—Å—Å–∏–≤–µ —Ñ–æ—Ç–æ
	newFilename := strings.ReplaceAll(filename, name, newName)        // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
	os.Rename(filename, newFilename)                                  // –∑–∞–º–µ–Ω—è–µ–º –∏–º—è —É —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
	IsMainGorutine := ImageNumber == 0                                // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –≥–æ—Ä—É—Ç–∏–Ω—É
	user.Images_Gemini[message.MessageID] = newFilename               // —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∞–ø–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
	user.Mutex.Unlock()

	user.WG.Done()

	// –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≥–æ—Ä—É—Ç–∏–Ω—ã, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏—Ö
	if !IsMainGorutine {
		return
	}

	SendMessage(user, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ...", nil, "")

	// –í –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ –≤—Å—Ç–∞—ë–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
	user.WG.Wait()

	user.Images_Gemini = SortMap(user.Images_Gemini)

	// –ü—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–º
	msgText := fmt.Sprintf(
		`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: %d
–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.
–ù–∞–ø—Ä–∏–º–µ—Ä:
"–ö—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?"
"–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —ç—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏?"`, len(user.Images_Gemini))
	SendMessage(user, msgText, button_RemoveKeyboard, "")

	user.Path = "gemini/type/image/text"

}

// –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func gen_imgtext(user *UserInfo, text string) {

	if gen_DailyLimitOfRequestsIsOver(user) {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	if text == "" {
		msgText := "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º."
		SendMessage(user, msgText, button_RemoveKeyboard, "")
		return
	}

	<-delay_Gemini

	user.Requests_today_gen++

	Operation := SQL_NewOperation(user, "gemini", "img", text)
	SQL_AddOperation(Operation)

	model := client_Gemini.GenerativeModel("gemini-pro-vision")

	prompt := []genai.Part{genai.Text(text)}
	for _, v := range user.Images_Gemini {
		imgData, err := os.ReadFile(v)
		if err != nil {
			Logs <- NewLog(user, "gemini", Error, err.Error())
			continue
		}
		prompt = append(prompt, genai.ImageData("jpeg", imgData))
	}

	resp, err := model.GenerateContent(ctx_Gemini, prompt...)

	if err != nil {
		Logs <- NewLog(user, "gemini{img}", Error, err.Error())
		msgText := "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
		SendMessage(user, msgText, buttons_genNewgen, "")
		user.Path = "gemini/type/image/text/newgen"
		return
	}

	if resp.Candidates[0].Content == nil {
		Logs <- NewLog(user, "gemini{img}", Error, "resp.Candidates[0].Content = nil")
		msgText := "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
		SendMessage(user, msgText, buttons_genNewgen, "")
		user.Path = "gemini/type/image/text/newgen"
		return
	}

	result := resp.Candidates[0].Content.Parts[0].(genai.Text)

	SendMessage(user, string(result), buttons_genNewgen, "")

	user.Path = "gemini/type/image/text/newgen"

}

// –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
func gen_imgtext_newgen(user *UserInfo, text string) {

	if gen_DailyLimitOfRequestsIsOver(user) {
		return
	}

	switch text {
	case "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞":
		SendMessage(user, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.", button_RemoveKeyboard, "")
		user.Path = "gemini/type/image/text"
	case "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
		user.DeleteImages() // –Ω–∞ –≤—Å—è–∫–∏–π –ø–æ—á–∏—Å—Ç–∏–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
		SendMessage(user, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫.", button_RemoveKeyboard, "")
		user.Path = "gemini/type/image"
	case "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥":
		user.DeleteImages() // –Ω–∞ –≤—Å—è–∫–∏–π –ø–æ—á–∏—Å—Ç–∏–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
		SendMessage(user, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", buttons_genEndDialog, "")
		user.Path = "gemini/type/dialog"
	default:
		// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
		gen_imgtext(user, text)
	}

}
