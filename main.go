package main

import (
	"embed"
	"fmt"
	"log"
	"os"
	"slices"
	"strings"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
)

const (
	WebHook           = "https://telegram-ai-bot-art-korn-39.amvera.io/"
	TelegramBotToken  = "6894745722:AAHMfRNCNM_T9P5-zUgV4OU_DLfzOOUEFmg"
	ChannelChatID     = -1001997602646
	ChannelURL        = "https://t.me/+6ZMACWRgFdRkNGEy"
	CheckSubscription = true
)

var (
	Bot         *tgbotapi.BotAPI
	Logs        chan Log
	ListOfUsers = map[int64]*UserInfo{}
	WhiteList   = []string{"anastasoid", "Eleng39", "Jokorn"}
	arrayCMD    = []string{"gemini", "kandinsky", "chatgpt"}
)

//ID chat (my) = 403059287
//ID chat (my second) = 609614322

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ webhook
// if _, err := bot.SetWebhook(tgbotapi.NewWebhook(WebHook)); err != nil {
// 	log.Fatalf("setting webhook %v; error: %v", WebHook, err)
// }

//bot.ListenForWebhook("/")

func init() {

	// –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
	b, err := tgbotapi.NewBotAPI(TelegramBotToken)
	if err != nil {
		log.Panic(err)
	}

	Bot = b

}

//go:embed scripts/generate_image.py
var script_py embed.FS

func main() {

	// data, _ := script_py.ReadFile("scripts/generate_image.py")
	// fmt.Println(string(data))

	log.Printf("added by git")
	log.Printf("Authorized on account %s", Bot.Self.UserName)

	// u - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥ u —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	updates, _ := Bot.GetUpdatesChan(u)

	// –í –æ—Ç–¥–µ–ª—å–Ω–æ –≥–æ—Ä—É—Ç–∏–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª–æ–≥–∞–º
	Logs = make(chan Log, 10)
	go func() {
		for v := range Logs {
			log.Printf("[%s] %s", v.UserName, v.Text)
			if v.IsError { // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—à–∏–±–∫—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
				err_file, _ := os.OpenFile("Errors.txt", os.O_APPEND|os.O_WRONLY, 0600)
				err_file.WriteString(fmt.Sprintf("[%s] %s\n", v.UserName, v.Text))
				err_file.Close()
			}
		}
	}()

	// –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
	for update := range updates {

		go func(upd tgbotapi.Update) {

			if upd.Message == nil {
				return
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
			if !accessIsAllowed(upd) {
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			User, ok := ListOfUsers[upd.Message.Chat.ID]
			if !ok {
				User = &UserInfo{}
				ListOfUsers[upd.Message.Chat.ID] = User
			}
			defer User.SetIsRunning(false)

			// –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			Logs <- Log{upd.Message.From.UserName, upd.Message.Text, false}

			// –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ç–æ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
			if alreadyRunning(User, upd) {
				return
			}

			// –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			User.SetIsRunning(true)

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			var result ResultOfRequest
			if MsgIsCommand(upd.Message) {
				cmd := MsgCommand(upd.Message)
				User.LastCommand = cmd
				result = processCommand(cmd, upd)
			} else {
				result = processText(upd.Message.Text, User.LastCommand, upd)
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			Bot.Send(result.Message)
			Logs <- Log{result.Log_author, result.Log_message, false}

		}(update)
	}
}

func processCommand(cmd string, upd tgbotapi.Update) ResultOfRequest {

	var result ResultOfRequest
	result.Log_author = "bot"

	switch cmd {
	case "start":
		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, start(upd.Message.Chat.FirstName))
		msg.ParseMode = "HTML"

		var buttons = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("Gemini"),
				tgbotapi.NewKeyboardButton("Kandinsky"),
				tgbotapi.NewKeyboardButton("ChatGPT"),
			),
		)
		msg.ReplyMarkup = buttons

		result.Message = msg
		result.Log_message = "/start for " + upd.Message.Chat.UserName
	case "stop":
		if upd.Message.From.UserName == "Art_Korn_39" {
			os.Exit(1)
		}
	case "chatgpt":
		msg_text := "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_message = msg_text
	case "gemini":
		msg_text := "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_message = msg_text
	case "kandinsky":
		msg_text := "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:"
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_message = msg_text
	}

	return result

}

func processText(text string, cmd string, upd tgbotapi.Update) ResultOfRequest {

	var result ResultOfRequest

	switch cmd {
	case "chatgpt":
		msg_text := SendRequestToChatGPT(upd.Message.Text)
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_author = "ChatGPT"
		result.Log_message = msg_text

	case "gemini":
		msg_text := SendRequestToGemini(upd.Message.Text)
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_author = "Gemini"
		result.Log_message = msg_text

	case "kandinsky":
		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.")
		Bot.Send(msg)

		pathToImage, err := SendRequestToKandinsky(upd.Message.Text)
		if err != nil {
			result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			result.Log_author = "Kandinsky"
			result.Log_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
			Logs <- Log{"Kandinsky", err.Error(), true}
		} else {
			result.Message = tgbotapi.NewPhotoUpload(upd.Message.Chat.ID, pathToImage)
			result.Log_author = "Kandinsky"
			result.Log_message = pathToImage
		}
	case "":
		msg_text := "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_author = "bot"
		result.Log_message = msg_text

	case "start":
		msg_text := "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
		result.Message = tgbotapi.NewMessage(upd.Message.Chat.ID, msg_text)
		result.Log_author = "bot"
		result.Log_message = msg_text
	}

	return result

}

func accessIsAllowed(upd tgbotapi.Update) bool {

	if !CheckSubscription {
		return true
	}

	if slices.Contains(WhiteList, upd.Message.Chat.UserName) {
		return true
	}

	result := true

	conf := tgbotapi.ChatConfigWithUser{ChatID: ChannelChatID, UserID: int(upd.Message.Chat.ID)}
	chatMember, err := Bot.GetChatMember(conf)
	if err != nil {
		Logs <- Log{"bot{GetChatMember}", err.Error(), true}
		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		Bot.Send(msg)
		result = false
	}

	if chatMember.Status != "member" && upd.Message.Text != "/start" {
		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ªüëá")
		var button = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", ChannelURL),
			),
		)
		msg.ReplyMarkup = button
		Bot.Send(msg)
		result = false
	}

	return result

}

func alreadyRunning(User *UserInfo, upd tgbotapi.Update) bool {

	if User.IsRunning {
		warning := "–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, warning)
		Bot.Send(msg)
		Logs <- Log{"bot", warning, false}
		return true
	}

	return false

}

func start(user string) string {

	t := `
–ü—Ä–∏–≤–µ—Ç, %user! üëã

–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏:

<b>ChatGPT</b> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.
<b>Gemini</b> - –∞–Ω–∞–ª–æ–≥ ChatGPT –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Google.
<b>Kandinsky</b> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ –∑–∞–¥–∞–π –µ–π –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ —Å–¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É), —É–¥–∞—á–∏!üî•`

	return strings.ReplaceAll(t, "%user", user)

}

// var buttons = tgbotapi.NewInlineKeyboardMarkup(
// 	tgbotapi.NewInlineKeyboardRow(
// 		tgbotapi.NewInlineKeyboardButtonData("Gemini", "gemini"),
// 		tgbotapi.NewInlineKeyboardButtonData("Kandinsky", "kandinsky"),
// 		tgbotapi.NewInlineKeyboardButtonData("Chat GPT", "chat_gpt"),
// 	),
// )

// msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "")
// msg.ReplyMarkup = buttons
// Bot.Send(msg)

// Hello, %user!

// ChatGPT is a neural network that is used to generate text.
// Gemini is an analogue of ChatGPT from Google.
// Kandinsky is a neural network that is used to create images based on text descriptions.

// You can use the bot for various purposes: it will help you write a course or essay, write a poem, draw a picture and answer questions that interest you.
// To get started, select a neural network and simply write down a question.
// --------------------------------------------------------------------------------

// var reply string
// var author string
// command := upd.Message.Command() // –∫–æ–º–º–∞–Ω–¥–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å "/"
// switch command {
// case "stop":
// 	if upd.Message.From.UserName == "Art_Korn_39" {
// 		return
// 	}
// case "start":
// 	reply = start(upd.Message.Chat.UserName)
// 	author = "bot"
// case "":
// 	// –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ, —Ç–æ —Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∞—è –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
// 	lastCommand := User.LastCommand
// 	switch lastCommand {
// 	case "":
// 		reply = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
// 		author = "bot"
// 	case "chat_gpt":
// 		reply = SendRequestToChatGPT(upd.Message.Text)
// 		author = "ChatGPT"
// 	case "gemini":
// 		reply = SendRequestToGemini_GetText(upd.Message.Text)
// 		author = "Gemini"
// 	case "kandinsky":
// 		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, "–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.")
// 		Bot.Send(msg)
// 		pathToImage, err := SendRequestToKandinsky(upd.Message.Text)
// 		if err != nil {
// 			reply = err.Error()
// 		} else {
// 			PhotoConfig := tgbotapi.NewPhotoUpload(upd.Message.Chat.ID, pathToImage)
// 			Bot.Send(PhotoConfig)
// 			reply = pathToImage
// 		}
// 		author = "Kandinsky"
// 	}
// default:
// 	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ —é–∑–µ—Ä—É
// 	User.LastCommand = command
// }

// if reply != "" {
// 	if author != "Kandinsky" {
// 		msg := tgbotapi.NewMessage(upd.Message.Chat.ID, reply)
// 		Bot.Send(msg)
// 	}
// 	Logs <- Log{author, reply}
// }
