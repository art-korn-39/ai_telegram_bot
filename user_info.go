package main

import (
	"os"
	"slices"
	"sync"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
	"github.com/google/generative-ai-go/genai"
	openai "github.com/sashabaranov/go-openai"
)

type UserInfo struct {
	Username         string
	ChatID           int64
	IsRunning        bool
	Path             string
	Options          map[string]string
	Messages_ChatGPT []openai.ChatCompletionMessage
	Messages_Gemini  []*genai.Content
	Images_Gemini    map[int]string // —É–¥–∞–ª—è—Ç—å –Ω–µ –∑–∞–±—ã—Ç—å
	Tokens_used_gpt  int
	Mutex            sync.Mutex
	WG               sync.WaitGroup
}

func NewUserInfo(u *tgbotapi.User, id int64) *UserInfo {
	username := u.UserName
	if username == "" {
		username = u.FirstName + "_" + u.LastName
	}
	return &UserInfo{Username: username, ChatID: id}
}

func (u *UserInfo) ClearUserData() {
	u.Options = map[string]string{}
	u.Messages_ChatGPT = []openai.ChatCompletionMessage{}
	u.Messages_Gemini = []*genai.Content{}
	u.DeleteImages()
}

func (u *UserInfo) DeleteImages() {
	for _, v := range u.Images_Gemini {
		os.Remove(v)
	}
	u.Images_Gemini = map[int]string{}
}

func AccessIsAllowed(upd tgbotapi.Update, u *UserInfo) bool {

	if !Cfg.CheckSubscription {
		return true
	}

	if slices.Contains(Cfg.WhiteList, u.Username) {
		return true
	}

	result := true

	conf := tgbotapi.ChatConfigWithUser{ChatID: ChannelChatID, UserID: int(u.ChatID)}
	chatMember, err := Bot.GetChatMember(conf)
	if err != nil {
		Logs <- NewLog(u, "bot", Error, "{GetChatMember} "+err.Error())
		msgText := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		SendMessage(u, msgText, nil, "")
		result = false
	}

	if !(chatMember.IsCreator() ||
		chatMember.IsAdministrator() ||
		chatMember.IsMember()) && upd.Message.Text != "/start" {
		msgText := "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ªüëá"
		SendMessage(u, msgText, buttons_Subscribe, "")
		result = false
	}

	return result

}

func (u *UserInfo) CheckUserLock(upd tgbotapi.Update) (isLocking bool) {

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ –æ–±—ä–µ–∫—Ç—É UserInfo –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
	u.Mutex.Lock()
	// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Ç–∞–≤–∏–º —á–µ—Ä–µ–∑ defer, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —Å—Ç–∞–ª–∞ –≤–µ—á–Ω–æ–π, –µ—Å–ª–∏ –≤ –º–µ—Ç–æ–¥–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç panic
	defer u.Mutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if u.IsRunning && !u.ImagesLoading(upd) {
		msgText := "–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
		SendMessage(u, msgText, nil, "")
		Logs <- NewLog(u, "bot", Info, msgText)
		return true
	}

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	u.SetIsRunning(true)
	return false
}

func (u *UserInfo) SetIsRunning(v bool) {
	u.IsRunning = v
}

func (u *UserInfo) ImagesLoading(upd tgbotapi.Update) bool {
	if u.Path == "gemini/type/image" && upd.Message.Photo != nil {
		return true
	}
	return false
}
